/* 1967 */
let input = `3,8,1005,8,327,1106,0,11,0,0,0,104,1,104,0,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,1001,8,0,28,1006,0,42,2,1104,11,10,1006,0,61,2,1005,19,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,102,1,8,65,1006,0,4,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,89,1,1108,10,10,1,1103,11,10,1,109,18,10,1006,0,82,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,102,1,8,126,2,109,7,10,1,104,3,10,1006,0,64,2,1109,20,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,163,3,8,102,-1,8,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,185,2,1109,12,10,2,103,16,10,1,107,11,10,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,1001,8,0,219,1,1005,19,10,3,8,102,-1,8,10,1001,10,1,10,4,10,108,1,8,10,4,10,102,1,8,245,2,1002,8,10,1,2,9,10,1006,0,27,1006,0,37,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,102,1,8,281,1006,0,21,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,1001,8,0,306,101,1,9,9,1007,9,1075,10,1005,10,15,99,109,649,104,0,104,1,21102,1,847069852568,1,21101,344,0,0,1105,1,448,21101,0,386979963688,1,21101,355,0,0,1105,1,448,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,46346031251,1,1,21101,0,402,0,1105,1,448,21102,1,29195594775,1,21101,0,413,0,1105,1,448,3,10,104,0,104,0,3,10,104,0,104,0,21101,0,868498428772,1,21101,0,436,0,1106,0,448,21102,718170641172,1,1,21102,1,447,0,1105,1,448,99,109,2,21202,-1,1,1,21102,40,1,2,21102,1,479,3,21102,1,469,0,1105,1,512,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,474,475,490,4,0,1001,474,1,474,108,4,474,10,1006,10,506,1101,0,0,474,109,-2,2106,0,0,0,109,4,2102,1,-1,511,1207,-3,0,10,1006,10,529,21101,0,0,-3,22101,0,-3,1,22101,0,-2,2,21101,0,1,3,21101,548,0,0,1106,0,553,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,576,2207,-4,-2,10,1006,10,576,21202,-4,1,-4,1106,0,644,22101,0,-4,1,21201,-3,-1,2,21202,-2,2,3,21102,1,595,0,1105,1,553,21201,1,0,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,614,21102,1,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,636,22102,1,-1,1,21102,1,636,0,106,0,511,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2105,1,0`;

function execute(pos) {
    let ip = 0;
    let relbase = 0;

    let x = 0;
    let y = 0;
    let o = 0;
    let orientations = ['u', 'r', 'd', 'l'];
    let outputcount = 0;
    
    const map = {};
    map[0] = {0: 0};

    while(1) {
        let instruction = pos[ip];
        while (instruction.length < 5) {
            instruction = '0' + instruction;
        }
        const opcode = instruction.substring(3);
        const m = [0, 1, 2, 3].map(x => parseInt(instruction.substring(3-x, 4-x)));
        const loc = offset => parseInt(pos[ip + offset]) + (m[offset] == 2 ? relbase : 0);

        function param(offset) {
            const loc = m[offset] == 1 ? ip + offset : (parseInt(pos[ip + offset]) + (m[offset] == 2 ? relbase : 0));
            return parseInt(typeof pos[loc] == 'undefined' ? 0 : pos[loc]);
        }

        if (1 == opcode) {
            pos[loc(3)] = '' + (param(1) + param(2));
            ip += 4;
        } else if (2 == opcode) {
            pos[loc(3)] = '' + param(1) * param(2);
            ip += 4;
        } else if (3 == opcode) {
            pos[loc(1)] = map[x][y];
            ip += 2;
        } else if (4 == opcode) {
            let output = param(1);
            if (outputcount % 2 == 0) {
                map[x][y] = output;
            } else {
                if (output == 0) {// turn left
                    o = (o - 1 + 4) % 4;
                } else {
                    o = (o + 1) % 4;
                }
                if (orientations[o] == 'u') {
                    y++;
                } else if (orientations[o] == 'r') {
                    x++;
                } else if (orientations[o] == 'd') {
                    y--;
                } else if (orientations[o] == 'l') {
                    x--;
                }
                if (!(x in map)) {
                    map[x] = {};
                    map[x][y] = 0;
                } else if (!(y in map[x])) {
                    map[x][y] = 0;
                }
            }
            outputcount++;
            ip += 2;
        } else if (5 == opcode) {
            ip = param(1) != 0 ? param(2) : ip + 3;
        } else if (6 == opcode) {
            ip = param(1) == 0 ? param(2) : ip + 3;
        } else if (7 == opcode) {
            pos[loc(3)] = param(1) < param(2) ? 1 : 0;
            ip += 4;
        } else if (8 == opcode) {
            pos[loc(3)] = param(1) == param(2) ? 1 : 0;
            ip += 4;
        } else if (9 == opcode) {
            relbase += param(1);
            ip += 2;
        } else if (99 == opcode) {
            break;
        }
    }    

    let count = 0;
    let ks = Object.keys(map);
    for (let k of ks) {
        count += Object.keys(map[k]).length;
    }
    return count;
}

console.log(execute(input.split(',')));
